import {Schema} from '../../src/schema';

// imported from https://api.us.ovhcloud.com:443/1.0/services.json

export const schema: Schema = {
  "apiVersion": "1.0",
  "apis": [
    {
      "description": "Get list of your service details",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "List available services",
          "httpMethod": "GET",
          "iamActions": [
            {
              "name": "account:apiovh:services/get",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "string",
              "description": "Order services by services.expanded.Service properties",
              "fullType": "string",
              "name": "orderBy",
              "paramType": "query",
              "required": false
            },
            {
              "dataType": "string",
              "description": "Filter services by their resourceName (resource.name)",
              "fullType": "string",
              "name": "resourceName",
              "paramType": "query",
              "required": false
            },
            {
              "dataType": "string",
              "description": "Filter services by API route path (comma separated)",
              "fullType": "string",
              "name": "routes",
              "paramType": "query",
              "required": false
            },
            {
              "dataType": "string",
              "description": "Sort results generated by 'orderBy'",
              "fullType": "string",
              "name": "sort",
              "paramType": "query",
              "required": false
            }
          ],
          "responseType": "long[]"
        }
      ],
      "path": "/services"
    },
    {
      "description": "Get list of your service details",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "Get details about a service",
          "httpMethod": "GET",
          "iamActions": [
            {
              "name": "account:apiovh:services/get",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "services.expanded.Service"
        },
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "Update service information",
          "httpMethod": "PUT",
          "iamActions": [
            {
              "name": "account:apiovh:services/edit",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "services.update.Service",
              "description": "Request Body",
              "fullType": "services.update.Service",
              "paramType": "body",
              "required": true
            },
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "void"
        }
      ],
      "path": "/services/{serviceId}"
    },
    {
      "description": "Engagement for a given service",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "Get engagement details",
          "httpMethod": "GET",
          "iamActions": [
            {
              "name": "account:apiovh:services/billing/engagement/get",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "services.billing.engagement.Engagement"
        }
      ],
      "path": "/services/{serviceId}/billing/engagement"
    },
    {
      "description": "List all available engagements a given service can subscribe to",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "List all available engagements a given service can subscribe to",
          "httpMethod": "GET",
          "iamActions": [
            {
              "name": "account:apiovh:services/billing/engagement/available/get",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "services.billing.Pricing[]"
        }
      ],
      "path": "/services/{serviceId}/billing/engagement/available"
    },
    {
      "description": "Change your Engagement end rules",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "Change your Engagement end rules",
          "httpMethod": "PUT",
          "iamActions": [
            {
              "name": "account:apiovh:services/billing/engagement/endRule",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "services.billing.engagement.UpdateEndRuleRequest",
              "description": "Request Body",
              "fullType": "services.billing.engagement.UpdateEndRuleRequest",
              "paramType": "body",
              "required": true
            },
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "void"
        }
      ],
      "path": "/services/{serviceId}/billing/engagement/endRule"
    },
    {
      "description": "Flush the engagement of this service",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "Flush the engagement of this service",
          "httpMethod": "POST",
          "iamActions": [
            {
              "name": "account:apiovh:services/billing/engagement/flush",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "services.billing.engagement.EngagementFlushRequest",
              "description": "Request Body",
              "fullType": "services.billing.engagement.EngagementFlushRequest",
              "paramType": "body",
              "required": true
            },
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "services.billing.engagement.EngagementFlushOrder"
        }
      ],
      "path": "/services/{serviceId}/billing/engagement/flush"
    },
    {
      "description": "Manage the Engagement request on this Service",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "Delete the ongoing Engagement request on this Service",
          "httpMethod": "DELETE",
          "iamActions": [
            {
              "name": "account:apiovh:services/billing/engagement/request/delete",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "void"
        },
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "Get the ongoing Engagement request on this Service",
          "httpMethod": "GET",
          "iamActions": [
            {
              "name": "account:apiovh:services/billing/engagement/request/get",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "services.billing.engagement.EngagementRequest"
        },
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "Request an Engagement on this Service",
          "httpMethod": "POST",
          "iamActions": [
            {
              "name": "account:apiovh:services/billing/engagement/request/create",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "services.billing.engagement.EngagementRequestCreation",
              "description": "Request Body",
              "fullType": "services.billing.engagement.EngagementRequestCreation",
              "paramType": "body",
              "required": true
            },
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "services.billing.engagement.EngagementRequest"
        }
      ],
      "path": "/services/{serviceId}/billing/engagement/request"
    },
    {
      "description": "Get a summary of the ongoing consumption of your service",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "Get a summary of the ongoing consumption of your service",
          "httpMethod": "GET",
          "iamActions": [
            {
              "name": "account:apiovh:services/consumption/get",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "services.consumption.Summary"
        }
      ],
      "path": "/services/{serviceId}/consumption"
    },
    {
      "description": "Get each resource consumed by your service",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "Get each resource consumed by your service",
          "httpMethod": "GET",
          "iamActions": [
            {
              "name": "account:apiovh:services/consumption/element/get",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            },
            {
              "dataType": "string",
              "description": "Filter elements on a commercial offer's family",
              "fullType": "string",
              "name": "planFamily",
              "paramType": "query",
              "required": false
            },
            {
              "dataType": "string",
              "description": "Filter elements on a given uniqueId",
              "fullType": "string",
              "name": "uniqueId",
              "paramType": "query",
              "required": false
            }
          ],
          "responseType": "services.consumption.Element[]"
        }
      ],
      "path": "/services/{serviceId}/consumption/element"
    },
    {
      "description": "Get a summary of the forecasted consumption of your service",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "Get a summary of the forecasted consumption of your service",
          "httpMethod": "GET",
          "iamActions": [
            {
              "name": "account:apiovh:services/consumption/forecast/get",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "services.consumption.Summary"
        }
      ],
      "path": "/services/{serviceId}/consumption/forecast"
    },
    {
      "description": "Get each resource forecasted consumption of your service",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "Get each resource forecasted consumption of your service",
          "httpMethod": "GET",
          "iamActions": [
            {
              "name": "account:apiovh:services/consumption/forecast/element/get",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            },
            {
              "dataType": "string",
              "description": "Filter elements on a commercial offer's family",
              "fullType": "string",
              "name": "planFamily",
              "paramType": "query",
              "required": false
            },
            {
              "dataType": "string",
              "description": "Filter elements on a given uniqueId",
              "fullType": "string",
              "name": "uniqueId",
              "paramType": "query",
              "required": false
            }
          ],
          "responseType": "services.consumption.Element[]"
        }
      ],
      "path": "/services/{serviceId}/consumption/forecast/element"
    },
    {
      "description": "Get a summary of the past consumption of your service",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "List consumption history of your service",
          "httpMethod": "GET",
          "iamActions": [
            {
              "name": "account:apiovh:services/consumption/history/get",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            },
            {
              "dataType": "string",
              "description": "Order services by services.expanded.Service properties",
              "fullType": "string",
              "name": "planFamily",
              "paramType": "query",
              "required": false
            },
            {
              "dataType": "string",
              "description": "Filter services by API route path (comma separated)",
              "fullType": "string",
              "name": "uniqueId",
              "paramType": "query",
              "required": false
            }
          ],
          "responseType": "long[]"
        }
      ],
      "path": "/services/{serviceId}/consumption/history"
    },
    {
      "description": "Get a summary of the past consumption of your service",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "Get a summary of the past consumption of your service",
          "httpMethod": "GET",
          "iamActions": [
            {
              "name": "account:apiovh:services/consumption/history/get",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "long",
              "description": "Id",
              "fullType": "long",
              "name": "id",
              "paramType": "path",
              "required": true
            },
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "services.consumption.Summary"
        }
      ],
      "path": "/services/{serviceId}/consumption/history/{id}"
    },
    {
      "description": "Get each resource consumed for the given history",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "Get each resource consumed for the given history",
          "httpMethod": "GET",
          "iamActions": [
            {
              "name": "account:apiovh:services/consumption/history/element/get",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "long",
              "description": "Id",
              "fullType": "long",
              "name": "id",
              "paramType": "path",
              "required": true
            },
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            },
            {
              "dataType": "string",
              "description": "Filter elements on a commercial offer's family",
              "fullType": "string",
              "name": "planFamily",
              "paramType": "query",
              "required": false
            },
            {
              "dataType": "string",
              "description": "Filter elements on a given uniqueId",
              "fullType": "string",
              "name": "uniqueId",
              "paramType": "query",
              "required": false
            }
          ],
          "responseType": "services.consumption.Element[]"
        }
      ],
      "path": "/services/{serviceId}/consumption/history/{id}/element"
    },
    {
      "description": "Detach your option offer to a standalone offer",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "List offers this option can be converted to",
          "httpMethod": "GET",
          "iamActions": [
            {
              "name": "account:apiovh:services/detach/get",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "order.cart.GenericProductDefinition[]"
        }
      ],
      "path": "/services/{serviceId}/detach"
    },
    {
      "description": "Detach your option offer to a standalone offer",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "View an offer this option can be converted to",
          "httpMethod": "GET",
          "iamActions": [
            {
              "name": "account:apiovh:services/detach/get",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "string",
              "description": "Plan code",
              "fullType": "string",
              "name": "planCode",
              "paramType": "path",
              "required": true
            },
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "order.cart.GenericProductDefinition"
        }
      ],
      "path": "/services/{serviceId}/detach/{planCode}"
    },
    {
      "description": "Detach your option offer to a standalone offer",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "Perform the migration to a standalone offer. May require you to pay an Order",
          "httpMethod": "POST",
          "iamActions": [
            {
              "name": "account:apiovh:services/detach/execute",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "services.operation.DetachExecutionRequest",
              "description": "Request Body",
              "fullType": "services.operation.DetachExecutionRequest",
              "paramType": "body",
              "required": true
            },
            {
              "dataType": "string",
              "description": "Plan code",
              "fullType": "string",
              "name": "planCode",
              "paramType": "path",
              "required": true
            },
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "services.operation.Order"
        }
      ],
      "path": "/services/{serviceId}/detach/{planCode}/execute"
    },
    {
      "description": "Retrieve all possible options you can detach the given service's options to",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "View all offers compatible for the detachment for the given option offer",
          "httpMethod": "GET",
          "iamActions": [
            {
              "name": "account:apiovh:services/detach/options/get",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "string",
              "description": "Plan code",
              "fullType": "string",
              "name": "planCode",
              "paramType": "path",
              "required": true
            },
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "services.operation.DetachOptionsDefinition[]"
        }
      ],
      "path": "/services/{serviceId}/detach/{planCode}/options"
    },
    {
      "description": "Detach your option offer to a standalone offer",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "Simulate the migration to a standalone offer",
          "httpMethod": "POST",
          "iamActions": [
            {
              "name": "account:apiovh:services/detach/simulate",
              "required": true
            }
          ],
          "longDescription": "Simulate the migration to a standalone offer. It won't generate any Order or issue any changes to your Service.",
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "services.operation.DetachExecutionRequest",
              "description": "Request Body",
              "fullType": "services.operation.DetachExecutionRequest",
              "paramType": "body",
              "required": true
            },
            {
              "dataType": "string",
              "description": "Plan code",
              "fullType": "string",
              "name": "planCode",
              "paramType": "path",
              "required": true
            },
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "services.operation.Order"
        }
      ],
      "path": "/services/{serviceId}/detach/{planCode}/simulate"
    },
    {
      "description": "Manage the forms for your services",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "List available forms for service",
          "httpMethod": "GET",
          "iamActions": [
            {
              "name": "account:apiovh:services/form/get",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "services.form.Description[]"
        }
      ],
      "path": "/services/{serviceId}/form"
    },
    {
      "description": "Manage the forms for your services",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "Get specified form description for service",
          "httpMethod": "GET",
          "iamActions": [
            {
              "name": "account:apiovh:services/form/get",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "string",
              "description": "Form name",
              "fullType": "string",
              "name": "formName",
              "paramType": "path",
              "required": true
            },
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "services.form.Description"
        }
      ],
      "path": "/services/{serviceId}/form/{formName}"
    },
    {
      "description": "Answers to a form for your service",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "Post answers to the form for your service",
          "httpMethod": "POST",
          "iamActions": [
            {
              "name": "account:apiovh:services/form/answer",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "services.form.Form",
              "description": "Request Body",
              "fullType": "services.form.Form",
              "paramType": "body",
              "required": true
            },
            {
              "dataType": "string",
              "description": "Form name",
              "fullType": "string",
              "name": "formName",
              "paramType": "path",
              "required": true
            },
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "services.form.Response"
        }
      ],
      "path": "/services/{serviceId}/form/{formName}/answer"
    },
    {
      "description": "Get options of your service",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "Get options of a service",
          "httpMethod": "GET",
          "iamActions": [
            {
              "name": "account:apiovh:services/options/get",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "services.expanded.Service[]"
        }
      ],
      "path": "/services/{serviceId}/options"
    },
    {
      "description": "Get possible renew periods of your service",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "Get possible renew periods of a service",
          "httpMethod": "GET",
          "iamActions": [
            {
              "name": "account:apiovh:services/renewPeriodCapacities/get",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "duration[]"
        }
      ],
      "path": "/services/{serviceId}/renewPeriodCapacities"
    },
    {
      "description": "View the technical details of the service",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "View the technical details of the service",
          "httpMethod": "GET",
          "iamActions": [
            {
              "name": "account:apiovh:services/technicalDetails/get",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "services.expanded.TechnicalDetails"
        }
      ],
      "path": "/services/{serviceId}/technicalDetails"
    },
    {
      "description": "Terminate your services",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "Request service termination",
          "httpMethod": "POST",
          "iamActions": [
            {
              "name": "account:apiovh:services/terminate",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "services.terminate.TerminationAnswer"
        }
      ],
      "path": "/services/{serviceId}/terminate"
    },
    {
      "description": "Confirm the termination of your service",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "Confirm service termination",
          "httpMethod": "POST",
          "iamActions": [
            {
              "name": "account:apiovh:services/terminate/confirm",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "services.terminate.ConfirmServiceTerminationRequest",
              "description": "Request Body",
              "fullType": "services.terminate.ConfirmServiceTerminationRequest",
              "paramType": "body",
              "required": true
            },
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "services.terminate.TerminationAnswer"
        }
      ],
      "path": "/services/{serviceId}/terminate/confirm"
    },
    {
      "description": "Upgrade your offer to another offer",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "List offers this option can be converted to",
          "httpMethod": "GET",
          "iamActions": [
            {
              "name": "account:apiovh:services/upgrade/get",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "order.cart.GenericProductDefinition[]"
        }
      ],
      "path": "/services/{serviceId}/upgrade"
    },
    {
      "description": "Upgrade your offer to another offer",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "View an offer this option can be converted to",
          "httpMethod": "GET",
          "iamActions": [
            {
              "name": "account:apiovh:services/upgrade/get",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "string",
              "description": "Plan code",
              "fullType": "string",
              "name": "planCode",
              "paramType": "path",
              "required": true
            },
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "order.cart.GenericProductDefinition"
        }
      ],
      "path": "/services/{serviceId}/upgrade/{planCode}"
    },
    {
      "description": "Upgrade your option offer to another offer",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "Perform the migration to another offer. May require you to pay an Order",
          "httpMethod": "POST",
          "iamActions": [
            {
              "name": "account:apiovh:services/upgrade/execute",
              "required": true
            }
          ],
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "services.operation.ExecutionRequest",
              "description": "Request Body",
              "fullType": "services.operation.ExecutionRequest",
              "paramType": "body",
              "required": true
            },
            {
              "dataType": "string",
              "description": "Plan code",
              "fullType": "string",
              "name": "planCode",
              "paramType": "path",
              "required": true
            },
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "services.operation.Order"
        }
      ],
      "path": "/services/{serviceId}/upgrade/{planCode}/execute"
    },
    {
      "description": "Upgrade your option offer to another offer",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "description": "Simulate the conversion to another offer",
          "httpMethod": "POST",
          "iamActions": [
            {
              "name": "account:apiovh:services/upgrade/simulate",
              "required": true
            }
          ],
          "longDescription": "Simulate the conversion to another offer. It won't generate any Order or issue any changes to your Service.",
          "noAuthentication": false,
          "parameters": [
            {
              "dataType": "services.operation.ExecutionRequest",
              "description": "Request Body",
              "fullType": "services.operation.ExecutionRequest",
              "paramType": "body",
              "required": true
            },
            {
              "dataType": "string",
              "description": "Plan code",
              "fullType": "string",
              "name": "planCode",
              "paramType": "path",
              "required": true
            },
            {
              "dataType": "long",
              "description": "Service ID",
              "fullType": "long",
              "name": "serviceId",
              "paramType": "path",
              "required": true
            }
          ],
          "responseType": "services.operation.Order"
        }
      ],
      "path": "/services/{serviceId}/upgrade/{planCode}/simulate"
    }
  ],
  "basePath": "https://api.us.ovhcloud.com/1.0",
  "models": {
    "complexType.SafeKeyValue<T>": {
      "description": "Key and value, with proper key strings",
      "generics": [
        "T"
      ],
      "id": "SafeKeyValue",
      "namespace": "complexType",
      "properties": {
        "key": {
          "canBeNull": false,
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "value": {
          "canBeNull": false,
          "fullType": "T",
          "readOnly": true,
          "required": false,
          "type": "T"
        }
      }
    },
    "complexType.SafeKeyValue<string>": {
      "description": "Key and value, with proper key strings",
      "generics": [
        "T"
      ],
      "id": "SafeKeyValue",
      "namespace": "complexType",
      "properties": {
        "key": {
          "canBeNull": false,
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "value": {
          "canBeNull": false,
          "fullType": "T",
          "readOnly": true,
          "required": false,
          "type": "T"
        }
      }
    },
    "order.Contract": {
      "description": "A contract",
      "id": "Contract",
      "namespace": "order",
      "properties": {
        "content": {
          "canBeNull": false,
          "description": "Terms of the contract",
          "fullType": "text",
          "readOnly": true,
          "required": false,
          "type": "text"
        },
        "name": {
          "canBeNull": false,
          "description": "Name of the contract",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "url": {
          "canBeNull": false,
          "description": "URL to download the contract",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        }
      }
    },
    "order.CurrencyCodeEnum": {
      "description": "Currency code",
      "enum": [
        "AUD",
        "CAD",
        "CZK",
        "EUR",
        "GBP",
        "INR",
        "LTL",
        "MAD",
        "N/A",
        "PLN",
        "SGD",
        "TND",
        "USD",
        "XOF",
        "points"
      ],
      "enumType": "string",
      "id": "CurrencyCodeEnum",
      "namespace": "order"
    },
    "order.Order": {
      "description": "An order",
      "id": "Order",
      "namespace": "order",
      "properties": {
        "contracts": {
          "canBeNull": false,
          "description": "List of contracts related to the order",
          "fullType": "order.Contract[]",
          "readOnly": true,
          "required": false,
          "type": "order.Contract[]"
        },
        "details": {
          "canBeNull": false,
          "description": "Details of the order",
          "fullType": "order.OrderDetail[]",
          "readOnly": true,
          "required": false,
          "type": "order.OrderDetail[]"
        },
        "orderId": {
          "canBeNull": true,
          "description": "Identifier of the order",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "prices": {
          "canBeNull": false,
          "description": "Prices of the order including with and without taxes",
          "fullType": "order.OrderPrices",
          "readOnly": true,
          "required": false,
          "type": "order.OrderPrices"
        },
        "url": {
          "canBeNull": true,
          "description": "URL to download the order",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        }
      }
    },
    "order.OrderDetail": {
      "description": "Detail of an order",
      "id": "OrderDetail",
      "namespace": "order",
      "properties": {
        "cartItemID": {
          "canBeNull": true,
          "description": "Cart Item ID the details is related to",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "description": {
          "canBeNull": false,
          "description": "Description of the detail",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "detailType": {
          "canBeNull": true,
          "description": "Type of detail",
          "fullType": "order.OrderDetailTypeEnum",
          "readOnly": true,
          "required": false,
          "type": "order.OrderDetailTypeEnum"
        },
        "domain": {
          "canBeNull": false,
          "description": "Service name",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "originalTotalPrice": {
          "canBeNull": false,
          "description": "Original price of the detail before reduction application",
          "fullType": "order.Price",
          "readOnly": true,
          "required": false,
          "type": "order.Price"
        },
        "quantity": {
          "canBeNull": false,
          "description": "Quantity of the service",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "reductionTotalPrice": {
          "canBeNull": false,
          "description": "Total price of the reduction",
          "fullType": "order.Price",
          "readOnly": true,
          "required": false,
          "type": "order.Price"
        },
        "reductions": {
          "canBeNull": false,
          "description": "List of reductions applied to the detail",
          "fullType": "order.Reduction[]",
          "readOnly": true,
          "required": false,
          "type": "order.Reduction[]"
        },
        "totalPrice": {
          "canBeNull": false,
          "description": "Price total of the services",
          "fullType": "order.Price",
          "readOnly": true,
          "required": false,
          "type": "order.Price"
        },
        "unitPrice": {
          "canBeNull": false,
          "description": "Unitary price of the service",
          "fullType": "order.Price",
          "readOnly": true,
          "required": false,
          "type": "order.Price"
        }
      }
    },
    "order.OrderDetailTypeEnum": {
      "description": "Product type of item in order",
      "enum": [
        "ACCESSORY",
        "CAUTION",
        "CHOOSED",
        "CONSUMPTION",
        "CREATION",
        "DELIVERY",
        "DURATION",
        "GIFT",
        "INSTALLATION",
        "LICENSE",
        "MUTE",
        "OTHER",
        "OUTPLAN",
        "QUANTITY",
        "REFUND",
        "RENEW",
        "SPECIAL",
        "SWITCH",
        "TRANSFER",
        "VOUCHER"
      ],
      "enumType": "string",
      "id": "OrderDetailTypeEnum",
      "namespace": "order"
    },
    "order.OrderPrices": {
      "description": "Prices of an order",
      "id": "OrderPrices",
      "namespace": "order",
      "properties": {
        "originalWithoutTax": {
          "canBeNull": true,
          "description": "Price before reduction application",
          "fullType": "order.Price",
          "readOnly": true,
          "required": false,
          "type": "order.Price"
        },
        "reduction": {
          "canBeNull": true,
          "description": "Price concerning the reduced amount",
          "fullType": "order.Price",
          "readOnly": true,
          "required": false,
          "type": "order.Price"
        },
        "tax": {
          "canBeNull": false,
          "description": "Tax amount",
          "fullType": "order.Price",
          "readOnly": true,
          "required": false,
          "type": "order.Price"
        },
        "withTax": {
          "canBeNull": false,
          "description": "Price with tax",
          "fullType": "order.Price",
          "readOnly": true,
          "required": false,
          "type": "order.Price"
        },
        "withoutTax": {
          "canBeNull": false,
          "description": "Price without tax",
          "fullType": "order.Price",
          "readOnly": true,
          "required": false,
          "type": "order.Price"
        }
      }
    },
    "order.Price": {
      "description": "Price with its currency and textual representation",
      "id": "Price",
      "namespace": "order",
      "properties": {
        "currencyCode": {
          "canBeNull": false,
          "description": "Currency code",
          "fullType": "order.CurrencyCodeEnum",
          "readOnly": true,
          "required": false,
          "type": "order.CurrencyCodeEnum"
        },
        "priceInUcents": {
          "canBeNull": true,
          "description": "Price in microcents",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "text": {
          "canBeNull": false,
          "description": "Textual representation",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "value": {
          "canBeNull": false,
          "description": "The effective price",
          "fullType": "double",
          "readOnly": true,
          "required": false,
          "type": "double"
        }
      }
    },
    "order.Reduction": {
      "description": "Order detail reduction",
      "id": "Reduction",
      "namespace": "order",
      "properties": {
        "context": {
          "canBeNull": false,
          "description": "In which context the reduction is applied",
          "fullType": "order.ReductionContextEnum",
          "readOnly": true,
          "required": false,
          "type": "order.ReductionContextEnum"
        },
        "description": {
          "canBeNull": false,
          "description": "Promotion description",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "price": {
          "canBeNull": false,
          "description": "Reduction price applied with this promotion",
          "fullType": "order.Price",
          "readOnly": true,
          "required": false,
          "type": "order.Price"
        },
        "reductionDescription": {
          "canBeNull": false,
          "description": "Reduction description",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "type": {
          "canBeNull": false,
          "description": "Reduction effect, price modification",
          "fullType": "order.ReductionTypeEnum",
          "readOnly": true,
          "required": false,
          "type": "order.ReductionTypeEnum"
        },
        "value": {
          "canBeNull": false,
          "description": "The reduction value",
          "fullType": "order.Price",
          "readOnly": true,
          "required": false,
          "type": "order.Price"
        }
      }
    },
    "order.ReductionContextEnum": {
      "description": "Context of the reduction",
      "enum": [
        "promotion",
        "voucher"
      ],
      "enumType": "string",
      "id": "ReductionContextEnum",
      "namespace": "order"
    },
    "order.ReductionTypeEnum": {
      "description": "Type of reduction",
      "enum": [
        "fixed_amount",
        "forced_amount",
        "percentage"
      ],
      "enumType": "string",
      "id": "ReductionTypeEnum",
      "namespace": "order"
    },
    "order.cart.GenericProductDefinition": {
      "description": "Representation of a generic product",
      "id": "GenericProductDefinition",
      "namespace": "order.cart",
      "properties": {
        "planCode": {
          "canBeNull": false,
          "description": "Product offer identifier",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "prices": {
          "canBeNull": false,
          "description": "Prices of the product offer",
          "fullType": "order.cart.GenericProductPricing[]",
          "readOnly": true,
          "required": false,
          "type": "order.cart.GenericProductPricing[]"
        },
        "productName": {
          "canBeNull": false,
          "description": "Name of the product",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "productType": {
          "canBeNull": false,
          "description": "Product type",
          "fullType": "order.cart.GenericProductTypeEnum",
          "readOnly": true,
          "required": false,
          "type": "order.cart.GenericProductTypeEnum"
        }
      }
    },
    "order.cart.GenericProductPricing": {
      "description": "Representation of a product pricing",
      "id": "GenericProductPricing",
      "namespace": "order.cart",
      "properties": {
        "capacities": {
          "canBeNull": false,
          "description": "Capacities of the pricing (type of pricing)",
          "fullType": "order.cart.GenericProductPricingCapacitiesEnum[]",
          "readOnly": true,
          "required": false,
          "type": "order.cart.GenericProductPricingCapacitiesEnum[]"
        },
        "description": {
          "canBeNull": false,
          "description": "Description of the pricing",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "duration": {
          "canBeNull": false,
          "description": "Duration for ordering the product",
          "fullType": "duration",
          "readOnly": true,
          "required": false,
          "type": "duration"
        },
        "interval": {
          "canBeNull": false,
          "description": "Interval of renewal",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "maximumQuantity": {
          "canBeNull": true,
          "description": "Maximum quantity that can be ordered",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "maximumRepeat": {
          "canBeNull": true,
          "description": "Maximum repeat for renewal",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "minimumQuantity": {
          "canBeNull": false,
          "description": "Minimum quantity that can be ordered",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "minimumRepeat": {
          "canBeNull": false,
          "description": "Minimum repeat for renewal",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "price": {
          "canBeNull": false,
          "description": "Price of the product",
          "fullType": "order.Price",
          "readOnly": true,
          "required": false,
          "type": "order.Price"
        },
        "priceInUcents": {
          "canBeNull": false,
          "description": "Price of the product in micro-centims",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "pricingMode": {
          "canBeNull": false,
          "description": "Pricing model identifier",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "pricingType": {
          "canBeNull": false,
          "description": "Pricing type",
          "fullType": "order.cart.GenericProductPricingTypeEnum",
          "readOnly": true,
          "required": false,
          "type": "order.cart.GenericProductPricingTypeEnum"
        }
      }
    },
    "order.cart.GenericProductPricingCapacitiesEnum": {
      "description": "Capacity of a pricing (type)",
      "enum": [
        "consumption",
        "detach",
        "downgrade",
        "dynamic",
        "installation",
        "renew",
        "upgrade"
      ],
      "enumType": "string",
      "id": "GenericProductPricingCapacitiesEnum",
      "namespace": "order.cart"
    },
    "order.cart.GenericProductPricingTypeEnum": {
      "description": "Type of a pricing",
      "enum": [
        "consumption",
        "purchase",
        "rental"
      ],
      "enumType": "string",
      "id": "GenericProductPricingTypeEnum",
      "namespace": "order.cart"
    },
    "order.cart.GenericProductTypeEnum": {
      "description": "Type of a product",
      "enum": [
        "cloud_service",
        "delivery",
        "deposit",
        "domain",
        "implementation_services",
        "saas_license",
        "shipping",
        "storage"
      ],
      "enumType": "string",
      "id": "GenericProductTypeEnum",
      "namespace": "order.cart"
    },
    "service.RenewType": {
      "description": "Map a possible renew for a specific service",
      "id": "RenewType",
      "namespace": "service",
      "properties": {
        "automatic": {
          "canBeNull": false,
          "description": "The service is automatically renewed",
          "fullType": "boolean",
          "readOnly": false,
          "required": false,
          "type": "boolean"
        },
        "deleteAtExpiration": {
          "canBeNull": false,
          "description": "The service will be deleted at expiration",
          "fullType": "boolean",
          "readOnly": false,
          "required": false,
          "type": "boolean"
        },
        "forced": {
          "canBeNull": false,
          "description": "The service forced to be renewed",
          "fullType": "boolean",
          "readOnly": false,
          "required": false,
          "type": "boolean"
        },
        "manualPayment": {
          "canBeNull": true,
          "description": "The service needs to be manually renewed and paid",
          "fullType": "boolean",
          "readOnly": false,
          "required": false,
          "type": "boolean"
        },
        "period": {
          "canBeNull": true,
          "description": "period of renew in month",
          "fullType": "long",
          "readOnly": false,
          "required": false,
          "type": "long"
        }
      }
    },
    "service.RenewalTypeEnum": {
      "description": "Detailed renewal type of a service",
      "enum": [
        "automaticForcedProduct",
        "automaticV2012",
        "automaticV2014",
        "automaticV2016",
        "manual",
        "oneShot",
        "option"
      ],
      "enumType": "string",
      "id": "RenewalTypeEnum",
      "namespace": "service"
    },
    "service.StateEnum": {
      "description": "service.StateEnum",
      "enum": [
        "expired",
        "inCreation",
        "ok",
        "pendingDebt",
        "unPaid"
      ],
      "enumType": "string",
      "id": "StateEnum",
      "namespace": "service"
    },
    "services.Service": {
      "description": "Details about a Service",
      "id": "Service",
      "namespace": "services",
      "properties": {
        "canDeleteAtExpiration": {
          "canBeNull": false,
          "description": "Indicates that the service can be set up to be deleted at expiration",
          "fullType": "boolean",
          "readOnly": true,
          "required": false,
          "type": "boolean"
        },
        "contactAdmin": {
          "canBeNull": false,
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "contactBilling": {
          "canBeNull": false,
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "contactTech": {
          "canBeNull": false,
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "creation": {
          "canBeNull": false,
          "fullType": "date",
          "readOnly": true,
          "required": false,
          "type": "date"
        },
        "domain": {
          "canBeNull": false,
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "engagedUpTo": {
          "canBeNull": true,
          "fullType": "date",
          "readOnly": true,
          "required": false,
          "type": "date"
        },
        "expiration": {
          "canBeNull": false,
          "fullType": "date",
          "readOnly": true,
          "required": false,
          "type": "date"
        },
        "possibleRenewPeriod": {
          "canBeNull": true,
          "description": "All the possible renew period of your service in month",
          "fullType": "long[]",
          "readOnly": true,
          "required": false,
          "type": "long[]"
        },
        "renew": {
          "canBeNull": true,
          "description": "Way of handling the renew",
          "fullType": "service.RenewType",
          "readOnly": false,
          "required": false,
          "type": "service.RenewType"
        },
        "renewalType": {
          "canBeNull": false,
          "fullType": "service.RenewalTypeEnum",
          "readOnly": true,
          "required": false,
          "type": "service.RenewalTypeEnum"
        },
        "serviceId": {
          "canBeNull": false,
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "status": {
          "canBeNull": false,
          "fullType": "service.StateEnum",
          "readOnly": true,
          "required": false,
          "type": "service.StateEnum"
        }
      }
    },
    "services.billing.Pricing": {
      "description": "Representation of a service pricing",
      "id": "Pricing",
      "namespace": "services.billing",
      "properties": {
        "capacities": {
          "canBeNull": false,
          "description": "Capacities of the pricing (type of pricing)",
          "fullType": "order.cart.GenericProductPricingCapacitiesEnum[]",
          "readOnly": true,
          "required": false,
          "type": "order.cart.GenericProductPricingCapacitiesEnum[]"
        },
        "description": {
          "canBeNull": false,
          "description": "Description of the pricing",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "duration": {
          "canBeNull": false,
          "description": "Default renew interval displayed using ISO8601",
          "fullType": "duration",
          "readOnly": true,
          "required": false,
          "type": "duration"
        },
        "engagementConfiguration": {
          "canBeNull": true,
          "description": "Pricing's engagement configuration",
          "fullType": "services.billing.Pricing.EngagementConfiguration",
          "readOnly": true,
          "required": false,
          "type": "services.billing.Pricing.EngagementConfiguration"
        },
        "interval": {
          "canBeNull": false,
          "description": "Interval of renewal",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "maximumQuantity": {
          "canBeNull": true,
          "description": "Maximum quantity that can be ordered",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "maximumRepeat": {
          "canBeNull": true,
          "description": "Maximum repeat for renewal",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "minimumQuantity": {
          "canBeNull": false,
          "description": "Minimum quantity that can be ordered",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "minimumRepeat": {
          "canBeNull": false,
          "description": "Minimum repeat for renewal",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "price": {
          "canBeNull": false,
          "description": "Price of the product",
          "fullType": "order.Price",
          "readOnly": true,
          "required": false,
          "type": "order.Price"
        },
        "priceInUcents": {
          "canBeNull": false,
          "description": "Price of the product in micro-centims",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "pricingMode": {
          "canBeNull": false,
          "description": "Pricing model identifier",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "pricingType": {
          "canBeNull": false,
          "description": "Pricing type",
          "fullType": "order.cart.GenericProductPricingTypeEnum",
          "readOnly": true,
          "required": false,
          "type": "order.cart.GenericProductPricingTypeEnum"
        }
      }
    },
    "services.billing.Pricing.EngagementConfiguration": {
      "description": "Configuration of an engagement triggered by a given pricing",
      "id": "EngagementConfiguration",
      "namespace": "services.billing.Pricing",
      "properties": {
        "defaultEndAction": {
          "canBeNull": false,
          "description": "Default action executed once the engagement is fully consumed",
          "fullType": "services.billing.engagement.EndStrategyEnum",
          "readOnly": true,
          "required": false,
          "type": "services.billing.engagement.EndStrategyEnum"
        },
        "duration": {
          "canBeNull": false,
          "description": "Engagement's duration displayed using ISO8601",
          "fullType": "duration",
          "readOnly": true,
          "required": false,
          "type": "duration"
        },
        "type": {
          "canBeNull": false,
          "description": "Engagement type, either fully pre-paid (upfront) or periodically paid up to engagement duration (periodic)",
          "fullType": "services.billing.engagement.TypeEnum",
          "readOnly": true,
          "required": false,
          "type": "services.billing.engagement.TypeEnum"
        }
      }
    },
    "services.billing.engagement.EndRule": {
      "description": "Description of the rule applied at the end of the Engagement",
      "id": "EndRule",
      "namespace": "services.billing.engagement",
      "properties": {
        "possibleStrategies": {
          "canBeNull": false,
          "description": "Describes the possible strategies for this Engagement",
          "fullType": "services.billing.engagement.EndStrategyEnum[]",
          "readOnly": true,
          "required": false,
          "type": "services.billing.engagement.EndStrategyEnum[]"
        },
        "strategy": {
          "canBeNull": false,
          "description": "Strategy applied at the end",
          "fullType": "services.billing.engagement.EndStrategyEnum",
          "readOnly": true,
          "required": false,
          "type": "services.billing.engagement.EndStrategyEnum"
        }
      }
    },
    "services.billing.engagement.EndStrategyEnum": {
      "description": "Strategy applicable at the end of the Engagement",
      "enum": [
        "CANCEL_SERVICE",
        "REACTIVATE_ENGAGEMENT",
        "STOP_ENGAGEMENT_FALLBACK_DEFAULT_PRICE",
        "STOP_ENGAGEMENT_KEEP_PRICE"
      ],
      "enumType": "string",
      "id": "EndStrategyEnum",
      "namespace": "services.billing.engagement"
    },
    "services.billing.engagement.Engagement": {
      "description": "Description of an Engagement",
      "id": "Engagement",
      "namespace": "services.billing.engagement",
      "properties": {
        "currentPeriod": {
          "canBeNull": false,
          "description": "Current engagement period",
          "fullType": "services.billing.engagement.EngagementPeriod",
          "readOnly": true,
          "required": false,
          "type": "services.billing.engagement.EngagementPeriod"
        },
        "endRule": {
          "canBeNull": true,
          "description": "Describes the rule applied at the end of the Engagement",
          "fullType": "services.billing.engagement.EndRule",
          "readOnly": true,
          "required": false,
          "type": "services.billing.engagement.EndRule"
        }
      }
    },
    "services.billing.engagement.EngagementFlushOrder": {
      "description": "Order created when flushing the engagement of a service",
      "id": "EngagementFlushOrder",
      "namespace": "services.billing.engagement",
      "properties": {
        "order": {
          "canBeNull": false,
          "description": "Order created to flush the engagement of the service",
          "fullType": "order.Order",
          "readOnly": true,
          "required": false,
          "type": "order.Order"
        }
      }
    },
    "services.billing.engagement.EngagementFlushRequest": {
      "description": "Parameters needed to flush the engagement",
      "id": "EngagementFlushRequest",
      "namespace": "services.billing.engagement",
      "properties": {
        "autoPayWithPreferredPaymentMethod": {
          "canBeNull": false,
          "description": "Indicates that order, if needed, will be automatically paid with preferred payment method",
          "fullType": "boolean",
          "readOnly": false,
          "required": false,
          "type": "boolean"
        },
        "dryRun": {
          "canBeNull": false,
          "description": "If false, the order will be registered; if true, the order will be returned but not registered. Useful to compute prices",
          "fullType": "boolean",
          "readOnly": false,
          "required": false,
          "type": "boolean"
        },
        "terminateSubscription": {
          "canBeNull": false,
          "description": "If true, when the order will be paid, the service termination workflow will automatically be started",
          "fullType": "boolean",
          "readOnly": false,
          "required": false,
          "type": "boolean"
        }
      }
    },
    "services.billing.engagement.EngagementPeriod": {
      "description": "Period of Engagement",
      "id": "EngagementPeriod",
      "namespace": "services.billing.engagement",
      "properties": {
        "endDate": {
          "canBeNull": true,
          "description": "End of the period",
          "fullType": "date",
          "readOnly": true,
          "required": false,
          "type": "date"
        },
        "startDate": {
          "canBeNull": false,
          "description": "Beginning of the period",
          "fullType": "date",
          "readOnly": true,
          "required": false,
          "type": "date"
        }
      }
    },
    "services.billing.engagement.EngagementRequest": {
      "description": "Ongoing Engagement request on a Service",
      "id": "EngagementRequest",
      "namespace": "services.billing.engagement",
      "properties": {
        "options": {
          "canBeNull": false,
          "description": "Option Pricings this request will migrate the Services to",
          "fullType": "services.billing.engagement.EngagementRequestOption[]",
          "readOnly": true,
          "required": false,
          "type": "services.billing.engagement.EngagementRequestOption[]"
        },
        "order": {
          "canBeNull": true,
          "description": "If not null, Order to pay in order to trigger the Engagement",
          "fullType": "order.Order",
          "readOnly": true,
          "required": false,
          "type": "order.Order"
        },
        "pricing": {
          "canBeNull": false,
          "description": "Pricing this request will migrate the Service to",
          "fullType": "services.billing.Pricing",
          "readOnly": true,
          "required": false,
          "type": "services.billing.Pricing"
        },
        "requestDate": {
          "canBeNull": false,
          "description": "Date the request was made on",
          "fullType": "date",
          "readOnly": true,
          "required": false,
          "type": "date"
        }
      }
    },
    "services.billing.engagement.EngagementRequestCreation": {
      "description": "Parameters needed to create an Engagement",
      "id": "EngagementRequestCreation",
      "namespace": "services.billing.engagement",
      "properties": {
        "pricingMode": {
          "canBeNull": false,
          "description": "Pricing mode to use in order to engage the Service",
          "fullType": "string",
          "readOnly": false,
          "required": true,
          "type": "string"
        }
      }
    },
    "services.billing.engagement.EngagementRequestOption": {
      "description": "Pricing detail for an Ongoing Engagement request on an option Service",
      "id": "EngagementRequestOption",
      "namespace": "services.billing.engagement",
      "properties": {
        "pricing": {
          "canBeNull": false,
          "description": "Pricing this request will migrate the option Service to",
          "fullType": "services.billing.Pricing",
          "readOnly": true,
          "required": false,
          "type": "services.billing.Pricing"
        },
        "serviceId": {
          "canBeNull": false,
          "description": "Service ID",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        }
      }
    },
    "services.billing.engagement.TypeEnum": {
      "description": "Engagement's type, either fully pre-paid (upfront) or periodically paid up to engagement duration (periodic)",
      "enum": [
        "periodic",
        "upfront"
      ],
      "enumType": "string",
      "id": "TypeEnum",
      "namespace": "services.billing.engagement"
    },
    "services.billing.engagement.UpdateEndRuleRequest": {
      "description": "Update your Engagement end rules",
      "id": "UpdateEndRuleRequest",
      "namespace": "services.billing.engagement",
      "properties": {
        "strategy": {
          "canBeNull": false,
          "description": "Strategy applied at the end of the Engagement",
          "fullType": "services.billing.engagement.EndStrategyEnum",
          "readOnly": false,
          "required": true,
          "type": "services.billing.engagement.EndStrategyEnum"
        }
      }
    },
    "services.consumption.Detail": {
      "description": "Element's quantity consumed for a given time range",
      "id": "Detail",
      "namespace": "services.consumption",
      "properties": {
        "beginDate": {
          "canBeNull": true,
          "description": "Begin date",
          "fullType": "datetime",
          "readOnly": true,
          "required": false,
          "type": "datetime"
        },
        "endDate": {
          "canBeNull": true,
          "description": "End date",
          "fullType": "datetime",
          "readOnly": true,
          "required": false,
          "type": "datetime"
        },
        "pricingMode": {
          "canBeNull": false,
          "description": "Pricing mode used during detail's time period",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "quantity": {
          "canBeNull": false,
          "description": "Consumed quantity",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        }
      }
    },
    "services.consumption.Element": {
      "description": "Consumption information for a specific offer",
      "id": "Element",
      "namespace": "services.consumption",
      "properties": {
        "details": {
          "canBeNull": false,
          "description": "List of consumption details for this element",
          "fullType": "services.consumption.Detail[]",
          "readOnly": true,
          "required": false,
          "type": "services.consumption.Detail[]"
        },
        "metadata": {
          "canBeNull": true,
          "description": "List of metadata related to this element",
          "fullType": "complexType.SafeKeyValue<string>[]",
          "readOnly": true,
          "required": false,
          "type": "complexType.SafeKeyValue<string>[]"
        },
        "planCode": {
          "canBeNull": false,
          "description": "Identifier of the offer",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "planFamily": {
          "canBeNull": false,
          "description": "Family of the offer",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "price": {
          "canBeNull": false,
          "description": "Total price of the element",
          "fullType": "order.Price",
          "readOnly": true,
          "required": false,
          "type": "order.Price"
        },
        "quantity": {
          "canBeNull": false,
          "description": "Consumed quantity",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "uniqueId": {
          "canBeNull": true,
          "description": "Unique ID of the consumed resource",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        }
      }
    },
    "services.consumption.PricePlanFamily": {
      "description": "Consumed amount for a given commercial offer's family",
      "id": "PricePlanFamily",
      "namespace": "services.consumption",
      "properties": {
        "planFamily": {
          "canBeNull": false,
          "description": "Commercial offer's range",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "price": {
          "canBeNull": false,
          "description": "Consumed amount by resources related to the given family",
          "fullType": "order.Price",
          "readOnly": true,
          "required": false,
          "type": "order.Price"
        }
      }
    },
    "services.consumption.Summary": {
      "description": "Summary of the consumption of a service",
      "id": "Summary",
      "namespace": "services.consumption",
      "properties": {
        "beginDate": {
          "canBeNull": false,
          "description": "Begin date of the returned consumption snapshot",
          "fullType": "datetime",
          "readOnly": true,
          "required": false,
          "type": "datetime"
        },
        "endDate": {
          "canBeNull": false,
          "description": "End date of the returned consumption snapshot",
          "fullType": "datetime",
          "readOnly": true,
          "required": false,
          "type": "datetime"
        },
        "id": {
          "canBeNull": false,
          "description": "Consumption transaction ID",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "orderId": {
          "canBeNull": true,
          "description": "Order ID",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "price": {
          "canBeNull": false,
          "description": "Total price of the service's consumption",
          "fullType": "order.Price",
          "readOnly": true,
          "required": false,
          "type": "order.Price"
        },
        "priceByPlanFamily": {
          "canBeNull": false,
          "description": "All the categories of commercial offers involved in the consumption of the service and their price",
          "fullType": "services.consumption.PricePlanFamily[]",
          "readOnly": true,
          "required": false,
          "type": "services.consumption.PricePlanFamily[]"
        },
        "serviceId": {
          "canBeNull": false,
          "description": "Service ID",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        }
      }
    },
    "services.expanded.Billing": {
      "description": "Billing information of the service",
      "id": "Billing",
      "namespace": "services.expanded",
      "properties": {
        "engagement": {
          "canBeNull": true,
          "description": "Engagement summary for this Service",
          "fullType": "services.expanded.EngagementSummary",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.EngagementSummary"
        },
        "engagementRequest": {
          "canBeNull": true,
          "description": "Ongoing engagement request summary for this Service",
          "fullType": "services.expanded.EngagementRequestSummary",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.EngagementRequestSummary"
        },
        "expirationDate": {
          "canBeNull": true,
          "description": "Expiration date",
          "fullType": "datetime",
          "readOnly": true,
          "required": false,
          "type": "datetime"
        },
        "group": {
          "canBeNull": true,
          "description": "Group information",
          "fullType": "services.expanded.Group",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.Group"
        },
        "lifecycle": {
          "canBeNull": true,
          "description": "Service life cycle",
          "fullType": "services.expanded.Lifecycle",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.Lifecycle"
        },
        "nextBillingDate": {
          "canBeNull": true,
          "description": "Next billing date",
          "fullType": "datetime",
          "readOnly": true,
          "required": false,
          "type": "datetime"
        },
        "plan": {
          "canBeNull": true,
          "description": "Service Plan",
          "fullType": "services.expanded.Plan",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.Plan"
        },
        "pricing": {
          "canBeNull": true,
          "description": "Service current Pricing",
          "fullType": "services.billing.Pricing",
          "readOnly": true,
          "required": false,
          "type": "services.billing.Pricing"
        },
        "renew": {
          "canBeNull": true,
          "description": "Service life renew",
          "fullType": "services.expanded.Renew",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.Renew"
        }
      }
    },
    "services.expanded.Customer": {
      "description": "Customer service relative information",
      "id": "Customer",
      "namespace": "services.expanded",
      "properties": {
        "contacts": {
          "canBeNull": false,
          "description": "Customer contact list",
          "fullType": "services.expanded.Customer.Contact[]",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.Customer.Contact[]"
        }
      }
    },
    "services.expanded.Customer.Contact": {
      "description": "Customer contact service relative information",
      "id": "Contact",
      "namespace": "services.expanded.Customer",
      "properties": {
        "customerCode": {
          "canBeNull": false,
          "description": "Customer code",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "type": {
          "canBeNull": false,
          "description": "Type of customer contact",
          "fullType": "services.expanded.Customer.Contact.TypeEnum",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.Customer.Contact.TypeEnum"
        }
      }
    },
    "services.expanded.Customer.Contact.TypeEnum": {
      "description": "Typology of customer contact",
      "enum": [
        "administrator",
        "billing",
        "technical"
      ],
      "enumType": "string",
      "id": "TypeEnum",
      "namespace": "services.expanded.Customer.Contact"
    },
    "services.expanded.EngagementRequestSummary": {
      "description": "Engagement request summary for a Service",
      "id": "EngagementRequestSummary",
      "namespace": "services.expanded",
      "properties": {
        "pricingMode": {
          "canBeNull": false,
          "description": "Future pricing mode of the service, when the request has been processed",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "requestDate": {
          "canBeNull": false,
          "description": "Date on which the request has been made",
          "fullType": "date",
          "readOnly": true,
          "required": false,
          "type": "date"
        }
      }
    },
    "services.expanded.EngagementSummary": {
      "description": "Engagement summary for a Service",
      "id": "EngagementSummary",
      "namespace": "services.expanded",
      "properties": {
        "endDate": {
          "canBeNull": true,
          "description": "Engagement end date",
          "fullType": "date",
          "readOnly": true,
          "required": false,
          "type": "date"
        },
        "endRule": {
          "canBeNull": true,
          "description": "Describes the rule applied at the end of the Engagement",
          "fullType": "services.billing.engagement.EndRule",
          "readOnly": true,
          "required": false,
          "type": "services.billing.engagement.EndRule"
        }
      }
    },
    "services.expanded.Group": {
      "description": "Billing group of the service",
      "id": "Group",
      "namespace": "services.expanded",
      "properties": {
        "id": {
          "canBeNull": false,
          "description": "Billing group id",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        }
      }
    },
    "services.expanded.Lifecycle": {
      "description": "Service life cycle",
      "id": "Lifecycle",
      "namespace": "services.expanded",
      "properties": {
        "capacities": {
          "canBeNull": false,
          "description": "Life cycle capacities",
          "fullType": "services.expanded.Lifecycle.Capacities",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.Lifecycle.Capacities"
        },
        "current": {
          "canBeNull": false,
          "description": "Current life cycle configuration",
          "fullType": "services.expanded.Lifecycle.Current",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.Lifecycle.Current"
        }
      }
    },
    "services.expanded.Lifecycle.ActionEnum": {
      "description": "Life cycle action",
      "enum": [
        "earlyRenewal",
        "terminate",
        "terminateAtEngagementDate",
        "terminateAtExpirationDate"
      ],
      "enumType": "string",
      "id": "ActionEnum",
      "namespace": "services.expanded.Lifecycle"
    },
    "services.expanded.Lifecycle.Capacities": {
      "description": "Service life cycle options",
      "id": "Capacities",
      "namespace": "services.expanded.Lifecycle",
      "properties": {
        "actions": {
          "canBeNull": false,
          "description": "Possible actions",
          "fullType": "services.expanded.Lifecycle.ActionEnum[]",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.Lifecycle.ActionEnum[]"
        }
      }
    },
    "services.expanded.Lifecycle.Current": {
      "description": "Current life cycle configuration",
      "id": "Current",
      "namespace": "services.expanded.Lifecycle",
      "properties": {
        "creationDate": {
          "canBeNull": true,
          "description": "Service creation date",
          "fullType": "datetime",
          "readOnly": true,
          "required": false,
          "type": "datetime"
        },
        "pendingActions": {
          "canBeNull": false,
          "description": "Pending actions",
          "fullType": "services.expanded.Lifecycle.ActionEnum[]",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.Lifecycle.ActionEnum[]"
        },
        "state": {
          "canBeNull": false,
          "description": "Current life cycle state",
          "fullType": "services.expanded.Lifecycle.StateEnum",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.Lifecycle.StateEnum"
        },
        "terminationDate": {
          "canBeNull": true,
          "description": "Scheduled termination date",
          "fullType": "datetime",
          "readOnly": true,
          "required": false,
          "type": "datetime"
        }
      }
    },
    "services.expanded.Lifecycle.StateEnum": {
      "description": "Life cycle service state",
      "enum": [
        "active",
        "error",
        "rupture",
        "terminated",
        "toRenew",
        "unpaid",
        "unrenewed"
      ],
      "enumType": "string",
      "id": "StateEnum",
      "namespace": "services.expanded.Lifecycle"
    },
    "services.expanded.Plan": {
      "description": "Plan of the service",
      "id": "Plan",
      "namespace": "services.expanded",
      "properties": {
        "code": {
          "canBeNull": false,
          "description": "Plan code",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "invoiceName": {
          "canBeNull": false,
          "description": "Invoice Name",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        }
      }
    },
    "services.expanded.Product": {
      "description": "Product of the service",
      "id": "Product",
      "namespace": "services.expanded",
      "properties": {
        "description": {
          "canBeNull": false,
          "description": "Product description",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "name": {
          "canBeNull": false,
          "description": "Product name",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        }
      }
    },
    "services.expanded.Renew": {
      "description": "Service renew information",
      "id": "Renew",
      "namespace": "services.expanded",
      "properties": {
        "capacities": {
          "canBeNull": false,
          "description": "Renew capacities",
          "fullType": "services.expanded.Renew.Capacities",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.Renew.Capacities"
        },
        "current": {
          "canBeNull": false,
          "description": "Current renew configuration",
          "fullType": "services.expanded.Renew.Current",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.Renew.Current"
        }
      }
    },
    "services.expanded.Renew.Capacities": {
      "description": "Service renew capacities",
      "id": "Capacities",
      "namespace": "services.expanded.Renew",
      "properties": {
        "mode": {
          "canBeNull": false,
          "description": "Renew mode capacities",
          "fullType": "services.expanded.Renew.ModeEnum[]",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.Renew.ModeEnum[]"
        }
      }
    },
    "services.expanded.Renew.Current": {
      "description": "Current renew configuration",
      "id": "Current",
      "namespace": "services.expanded.Renew",
      "properties": {
        "mode": {
          "canBeNull": true,
          "description": "Renew mode",
          "fullType": "services.expanded.Renew.ModeEnum",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.Renew.ModeEnum"
        },
        "nextDate": {
          "canBeNull": true,
          "description": "Scheduled renew date",
          "fullType": "datetime",
          "readOnly": true,
          "required": false,
          "type": "datetime"
        },
        "period": {
          "canBeNull": true,
          "description": "Next renewal duration",
          "fullType": "duration",
          "readOnly": true,
          "required": false,
          "type": "duration"
        }
      }
    },
    "services.expanded.Renew.ModeEnum": {
      "description": "Renew mode",
      "enum": [
        "automatic",
        "manual"
      ],
      "enumType": "string",
      "id": "ModeEnum",
      "namespace": "services.expanded.Renew"
    },
    "services.expanded.ResellingProviderEnum": {
      "description": "Reselling providers a service can be provided from",
      "enum": [
        "ovh.ca",
        "ovh.eu"
      ],
      "enumType": "string",
      "id": "ResellingProviderEnum",
      "namespace": "services.expanded"
    },
    "services.expanded.Resource": {
      "description": "Resource of the service",
      "id": "Resource",
      "namespace": "services.expanded",
      "properties": {
        "displayName": {
          "canBeNull": false,
          "description": "Display name of the resource",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "name": {
          "canBeNull": false,
          "description": "Name of the resource",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "product": {
          "canBeNull": true,
          "description": "Product",
          "fullType": "services.expanded.Product",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.Product"
        },
        "resellingProvider": {
          "canBeNull": true,
          "description": "Reselling provider providing the service",
          "fullType": "services.expanded.ResellingProviderEnum",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.ResellingProviderEnum"
        },
        "state": {
          "canBeNull": false,
          "description": "Resource state",
          "fullType": "services.expanded.Resource.StateEnum",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.Resource.StateEnum"
        }
      }
    },
    "services.expanded.Resource.StateEnum": {
      "description": "Resource state",
      "enum": [
        "active",
        "deleted",
        "suspended",
        "toActivate",
        "toDelete",
        "toSuspend"
      ],
      "enumType": "string",
      "id": "StateEnum",
      "namespace": "services.expanded.Resource"
    },
    "services.expanded.Route": {
      "description": "Route of the service",
      "id": "Route",
      "namespace": "services.expanded",
      "properties": {
        "path": {
          "canBeNull": true,
          "description": "Path to use in API",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "url": {
          "canBeNull": true,
          "description": "Path with variables applied",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "vars": {
          "canBeNull": false,
          "description": "Variables to use in the path",
          "fullType": "complexType.SafeKeyValue<string>[]",
          "readOnly": true,
          "required": false,
          "type": "complexType.SafeKeyValue<string>[]"
        }
      }
    },
    "services.expanded.Service": {
      "description": "Description of a service",
      "id": "Service",
      "namespace": "services.expanded",
      "properties": {
        "billing": {
          "canBeNull": false,
          "description": "Billing information",
          "fullType": "services.expanded.Billing",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.Billing"
        },
        "customer": {
          "canBeNull": false,
          "description": "Customer information",
          "fullType": "services.expanded.Customer",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.Customer"
        },
        "parentServiceId": {
          "canBeNull": true,
          "description": "Parent service ID",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "resource": {
          "canBeNull": false,
          "description": "Resource",
          "fullType": "services.expanded.Resource",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.Resource"
        },
        "route": {
          "canBeNull": true,
          "description": "Route",
          "fullType": "services.expanded.Route",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.Route"
        },
        "serviceId": {
          "canBeNull": false,
          "description": "Service ID",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "tags": {
          "canBeNull": false,
          "description": "Service tags",
          "fullType": "string[]",
          "readOnly": true,
          "required": false,
          "type": "string[]"
        }
      }
    },
    "services.expanded.TechnicalDetails": {
      "description": "Technical information of a baremetal service",
      "id": "TechnicalDetails",
      "namespace": "services.expanded",
      "properties": {
        "baremetalServers": {
          "canBeNull": true,
          "fullType": "services.expanded.technical.BaremetalServer",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.BaremetalServer"
        },
        "nutanixCluster": {
          "canBeNull": true,
          "fullType": "services.expanded.technical.NutanixCluster",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.NutanixCluster"
        }
      }
    },
    "services.expanded.technical.BaremetalServer": {
      "description": "Technical information on baremetal service",
      "id": "BaremetalServer",
      "namespace": "services.expanded.technical",
      "properties": {
        "bandwidth": {
          "canBeNull": true,
          "description": "Technical information on server bandwidth",
          "fullType": "services.expanded.technical.baremetalServer.Bandwidth",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.baremetalServer.Bandwidth"
        },
        "gpu": {
          "canBeNull": true,
          "description": "Technical information on server gpu",
          "fullType": "services.expanded.technical.baremetalServer.Gpu",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.baremetalServer.Gpu"
        },
        "memory": {
          "canBeNull": true,
          "description": "Technical information on server memory",
          "fullType": "services.expanded.technical.baremetalServer.Memory",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.baremetalServer.Memory"
        },
        "server": {
          "canBeNull": true,
          "description": "Technical information on server type",
          "fullType": "services.expanded.technical.baremetalServer.Server",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.baremetalServer.Server"
        },
        "storage": {
          "canBeNull": true,
          "description": "Technical information on server storage",
          "fullType": "services.expanded.technical.baremetalServer.Storage",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.baremetalServer.Storage"
        },
        "vrack": {
          "canBeNull": true,
          "description": "Technical information on server vrack",
          "fullType": "services.expanded.technical.baremetalServer.Vrack",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.baremetalServer.Vrack"
        }
      }
    },
    "services.expanded.technical.NutanixCluster": {
      "description": "Technical information on nutanix cluster service",
      "id": "NutanixCluster",
      "namespace": "services.expanded.technical",
      "properties": {
        "cluster": {
          "canBeNull": true,
          "description": "Technical information on nutanix cluster",
          "fullType": "services.expanded.technical.nutanixCluster.Cluster",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.nutanixCluster.Cluster"
        },
        "features": {
          "canBeNull": true,
          "description": "Features of a cluster",
          "fullType": "services.expanded.technical.nutanixCluster.Features[]",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.nutanixCluster.Features[]"
        },
        "license": {
          "canBeNull": true,
          "description": "Technical details of the license of a cluster",
          "fullType": "services.expanded.technical.nutanixCluster.License",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.nutanixCluster.License"
        },
        "service": {
          "canBeNull": true,
          "description": "Details about the service (SLA, ..)",
          "fullType": "services.expanded.technical.nutanixCluster.Service",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.nutanixCluster.Service"
        }
      }
    },
    "services.expanded.technical.baremetalServer.Aggregation": {
      "description": "Aggregation information",
      "id": "Aggregation",
      "namespace": "services.expanded.technical.baremetalServer",
      "properties": {
        "upTo": {
          "canBeNull": false,
          "description": "Maximum aggregated bandwidth (in Mbps)",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        }
      }
    },
    "services.expanded.technical.baremetalServer.Bandwidth": {
      "description": "Technical information on bandwidth of a baremetal service",
      "id": "Bandwidth",
      "namespace": "services.expanded.technical.baremetalServer",
      "properties": {
        "aggregation": {
          "canBeNull": true,
          "description": "Aggregation information",
          "fullType": "services.expanded.technical.baremetalServer.Aggregation",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.baremetalServer.Aggregation"
        },
        "burst": {
          "canBeNull": false,
          "description": "Bandwidth burst",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "guaranteed": {
          "canBeNull": false,
          "description": "Guaranteed bandwith of the server",
          "fullType": "boolean",
          "readOnly": true,
          "required": false,
          "type": "boolean"
        },
        "level": {
          "canBeNull": false,
          "description": "Level width of Band",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "limit": {
          "canBeNull": false,
          "description": "Bandwidth limit",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        }
      }
    },
    "services.expanded.technical.baremetalServer.Gpu": {
      "description": "Technical details for a GPU",
      "id": "Gpu",
      "namespace": "services.expanded.technical.baremetalServer",
      "properties": {
        "brand": {
          "canBeNull": false,
          "description": "GPU brand",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "memory": {
          "canBeNull": false,
          "description": "GPU memory",
          "fullType": "services.expanded.technical.baremetalServer.GpuMemory",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.baremetalServer.GpuMemory"
        },
        "model": {
          "canBeNull": false,
          "description": "GPU model",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "number": {
          "canBeNull": false,
          "description": "Number of GPUs",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        }
      }
    },
    "services.expanded.technical.baremetalServer.GpuMemory": {
      "description": "Technical details for a GPU Memory",
      "id": "GpuMemory",
      "namespace": "services.expanded.technical.baremetalServer",
      "properties": {
        "size": {
          "canBeNull": false,
          "description": "Memory size (in GB)",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        }
      }
    },
    "services.expanded.technical.baremetalServer.Memory": {
      "description": "Technical information on memory of a baremetal service",
      "id": "Memory",
      "namespace": "services.expanded.technical.baremetalServer",
      "properties": {
        "ecc": {
          "canBeNull": false,
          "description": "Is ECC feature is enabled on memory",
          "fullType": "boolean",
          "readOnly": true,
          "required": false,
          "type": "boolean"
        },
        "frequency": {
          "canBeNull": false,
          "description": "Memory frequency",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "ramType": {
          "canBeNull": false,
          "description": "Type of memory",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "size": {
          "canBeNull": false,
          "description": "Memory size",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        }
      }
    },
    "services.expanded.technical.baremetalServer.Server": {
      "description": "Technical information of a baremetal server service",
      "id": "Server",
      "namespace": "services.expanded.technical.baremetalServer",
      "properties": {
        "cpu": {
          "canBeNull": false,
          "description": "Server Cpu",
          "fullType": "services.expanded.technical.baremetalServer.server.Cpu",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.baremetalServer.server.Cpu"
        },
        "extensionCard": {
          "canBeNull": true,
          "description": "Technical details for a server extension card",
          "fullType": "services.expanded.technical.baremetalServer.server.ExtensionCard",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.baremetalServer.server.ExtensionCard"
        },
        "frame": {
          "canBeNull": false,
          "description": "Server frame",
          "fullType": "services.expanded.technical.baremetalServer.server.Frame",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.baremetalServer.server.Frame"
        },
        "network": {
          "canBeNull": true,
          "description": "Technical details for a server network",
          "fullType": "services.expanded.technical.baremetalServer.server.Network",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.baremetalServer.server.Network"
        },
        "range": {
          "canBeNull": false,
          "description": "Server's range",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "services": {
          "canBeNull": true,
          "description": "Technical details for a server service",
          "fullType": "services.expanded.technical.baremetalServer.server.Services",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.baremetalServer.server.Services"
        },
        "useCase": {
          "canBeNull": true,
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        }
      }
    },
    "services.expanded.technical.baremetalServer.Storage": {
      "description": "Technical information of storage of a baremetal service",
      "id": "Storage",
      "namespace": "services.expanded.technical.baremetalServer",
      "properties": {
        "disks": {
          "canBeNull": false,
          "description": "List of storage disks",
          "fullType": "services.expanded.technical.baremetalServer.storage.Disk[]",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.baremetalServer.storage.Disk[]"
        },
        "hotSwap": {
          "canBeNull": false,
          "description": "If disk is hot swapable",
          "fullType": "boolean",
          "readOnly": true,
          "required": false,
          "type": "boolean"
        },
        "raid": {
          "canBeNull": false,
          "description": "Storage raid type",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "raidDetails": {
          "canBeNull": true,
          "description": "Server raid storage details",
          "fullType": "services.expanded.technical.baremetalServer.storage.Raid",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.baremetalServer.storage.Raid"
        }
      }
    },
    "services.expanded.technical.baremetalServer.Vrack": {
      "description": "Technical information of vrack of a baremetal service",
      "id": "Vrack",
      "namespace": "services.expanded.technical.baremetalServer",
      "properties": {
        "aggregation": {
          "canBeNull": true,
          "description": "Aggregation information",
          "fullType": "services.expanded.technical.baremetalServer.Aggregation",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.baremetalServer.Aggregation"
        },
        "burst": {
          "canBeNull": false,
          "description": "Bandwidth burst",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "guaranteed": {
          "canBeNull": false,
          "description": "Guaranteed bandwith on the Vrack",
          "fullType": "boolean",
          "readOnly": true,
          "required": false,
          "type": "boolean"
        },
        "level": {
          "canBeNull": false,
          "description": "Level width of Band",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "limit": {
          "canBeNull": false,
          "description": "Bandwidth limit",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        }
      }
    },
    "services.expanded.technical.baremetalServer.server.Cpu": {
      "description": "Technical information on cpu of a baremetal server service",
      "id": "Cpu",
      "namespace": "services.expanded.technical.baremetalServer.server",
      "properties": {
        "boost": {
          "canBeNull": false,
          "description": "Server Cpu boost",
          "fullType": "double",
          "readOnly": true,
          "required": false,
          "type": "double"
        },
        "brand": {
          "canBeNull": false,
          "description": "Server Cpu brand name",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "cores": {
          "canBeNull": false,
          "description": "Cpu number of cores",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "frequency": {
          "canBeNull": false,
          "description": "Server",
          "fullType": "double",
          "readOnly": true,
          "required": false,
          "type": "double"
        },
        "model": {
          "canBeNull": false,
          "description": "Server Cpu model name",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "number": {
          "canBeNull": false,
          "description": "CPU number",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "score": {
          "canBeNull": false,
          "description": "Score of cpu",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "threads": {
          "canBeNull": false,
          "description": "Server Cpu number of threads",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        }
      }
    },
    "services.expanded.technical.baremetalServer.server.ExtensionCard": {
      "description": "Technical details for a server extension card",
      "id": "ExtensionCard",
      "namespace": "services.expanded.technical.baremetalServer.server",
      "properties": {
        "model": {
          "canBeNull": false,
          "description": "Model of the extension card",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "size": {
          "canBeNull": false,
          "description": "Number of available ports",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        }
      }
    },
    "services.expanded.technical.baremetalServer.server.Frame": {
      "description": "Technical information on frame of a baremetal server service",
      "id": "Frame",
      "namespace": "services.expanded.technical.baremetalServer.server",
      "properties": {
        "dualPowerSupply": {
          "canBeNull": false,
          "description": "Server with dual power supply",
          "fullType": "boolean",
          "readOnly": true,
          "required": false,
          "type": "boolean"
        },
        "maxNbDisks": {
          "canBeNull": true,
          "description": "Maximum number of disks",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "model": {
          "canBeNull": false,
          "description": "Server frame Model",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "size": {
          "canBeNull": false,
          "description": "Server frame size",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        }
      }
    },
    "services.expanded.technical.baremetalServer.server.Network": {
      "description": "Technical details for a server network",
      "id": "Network",
      "namespace": "services.expanded.technical.baremetalServer.server",
      "properties": {
        "capacity": {
          "canBeNull": false,
          "description": "Network card capacity (in Gbps)",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "interfaces": {
          "canBeNull": false,
          "description": "Number of network links",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        }
      }
    },
    "services.expanded.technical.baremetalServer.server.Services": {
      "description": "Technical details for a server services",
      "id": "Services",
      "namespace": "services.expanded.technical.baremetalServer.server",
      "properties": {
        "antiddos": {
          "canBeNull": false,
          "description": "AntiDDOS provided by the service",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "includedBackup": {
          "canBeNull": false,
          "description": "FTP Backup size in GB",
          "fullType": "double",
          "readOnly": true,
          "required": false,
          "type": "double"
        },
        "ipmiAvailable": {
          "canBeNull": false,
          "description": "Is IPMI available",
          "fullType": "boolean",
          "readOnly": true,
          "required": false,
          "type": "boolean"
        },
        "ipv4RangeIncluded": {
          "canBeNull": true,
          "description": "ipv4 range included",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "ipv6RangeIncluded": {
          "canBeNull": true,
          "description": "ipv6 range included",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "kvmipAvailable": {
          "canBeNull": false,
          "description": "Is KVMIP available",
          "fullType": "boolean",
          "readOnly": true,
          "required": false,
          "type": "boolean"
        },
        "olaAvailable": {
          "canBeNull": false,
          "description": "Define if the product is eligible to the OVHcloud Link aggregation feature",
          "fullType": "boolean",
          "readOnly": true,
          "required": false,
          "type": "boolean"
        },
        "secureComputingTechnology": {
          "canBeNull": true,
          "description": "Which secure computing technology is used",
          "fullType": "services.expanded.technical.baremetalServer.server.services.SecureComputingTechnologyEnum",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.baremetalServer.server.services.SecureComputingTechnologyEnum"
        },
        "sla": {
          "canBeNull": false,
          "description": "SLA of the service (in percent)",
          "fullType": "double",
          "readOnly": true,
          "required": false,
          "type": "double"
        },
        "supportLevel": {
          "canBeNull": true,
          "description": "Which support level of service is included",
          "fullType": "services.expanded.technical.baremetalServer.server.services.SupportLevelEnum",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.baremetalServer.server.services.SupportLevelEnum"
        }
      }
    },
    "services.expanded.technical.baremetalServer.server.services.SecureComputingTechnologyEnum": {
      "description": "Type of secure computing technology",
      "enum": [
        "AMDInfinity",
        "IntelSGX"
      ],
      "enumType": "string",
      "id": "SecureComputingTechnologyEnum",
      "namespace": "services.expanded.technical.baremetalServer.server.services"
    },
    "services.expanded.technical.baremetalServer.server.services.SupportLevelEnum": {
      "description": "Type of support level",
      "enum": [
        "business",
        "enterprise",
        "premium",
        "premium-accredited",
        "standard"
      ],
      "enumType": "string",
      "id": "SupportLevelEnum",
      "namespace": "services.expanded.technical.baremetalServer.server.services"
    },
    "services.expanded.technical.baremetalServer.storage.Disk": {
      "description": "Technical information of storage disk of a baremetal service",
      "id": "Disk",
      "namespace": "services.expanded.technical.baremetalServer.storage",
      "properties": {
        "capacity": {
          "canBeNull": false,
          "description": "Maximum disk capacity",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "dwpd": {
          "canBeNull": true,
          "description": "Drive Writes Per Day",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "interface": {
          "canBeNull": false,
          "description": "Interface identifier",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "latency": {
          "canBeNull": true,
          "description": "Latency (in us)",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "number": {
          "canBeNull": false,
          "description": "Number of interfaces",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "read": {
          "canBeNull": true,
          "description": "Average number of random read I/O operations per second",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        },
        "specs": {
          "canBeNull": false,
          "description": "Form factor of the hardware",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "technology": {
          "canBeNull": false,
          "description": "Type of disk",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "usage": {
          "canBeNull": true,
          "description": "Disk's usage",
          "fullType": "services.expanded.technical.baremetalServer.storage.Disk.UsageEnum",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.baremetalServer.storage.Disk.UsageEnum"
        },
        "write": {
          "canBeNull": true,
          "description": "Average number of random write I/O operations per second",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        }
      }
    },
    "services.expanded.technical.baremetalServer.storage.Disk.UsageEnum": {
      "description": "Type of disk's usage",
      "enum": [
        "cache",
        "data",
        "os"
      ],
      "enumType": "string",
      "id": "UsageEnum",
      "namespace": "services.expanded.technical.baremetalServer.storage.Disk"
    },
    "services.expanded.technical.baremetalServer.storage.Raid": {
      "description": "Server raid storage type",
      "id": "Raid",
      "namespace": "services.expanded.technical.baremetalServer.storage",
      "properties": {
        "cardModel": {
          "canBeNull": true,
          "description": "Name of the hardraid card model",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "cardSize": {
          "canBeNull": true,
          "description": "Number of slots",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "type": {
          "canBeNull": false,
          "fullType": "services.expanded.technical.baremetalServer.storage.Raid.TypeEnum",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.baremetalServer.storage.Raid.TypeEnum"
        }
      }
    },
    "services.expanded.technical.baremetalServer.storage.Raid.TypeEnum": {
      "description": "RAID type",
      "enum": [
        "Hard RAID",
        "Soft RAID",
        "none"
      ],
      "enumType": "string",
      "id": "TypeEnum",
      "namespace": "services.expanded.technical.baremetalServer.storage.Raid"
    },
    "services.expanded.technical.nutanixCluster.Cluster": {
      "description": "Technical information on nutanix cluster service",
      "id": "Cluster",
      "namespace": "services.expanded.technical.nutanixCluster",
      "properties": {
        "range": {
          "canBeNull": false,
          "description": "Nutanix cluster range",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "server": {
          "canBeNull": false,
          "description": "Nutanix cluster server",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        }
      }
    },
    "services.expanded.technical.nutanixCluster.Features": {
      "description": "Nutanix feature",
      "id": "Features",
      "namespace": "services.expanded.technical.nutanixCluster",
      "properties": {
        "name": {
          "canBeNull": false,
          "description": "Feature name",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "value": {
          "canBeNull": false,
          "description": "Feature value",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        }
      }
    },
    "services.expanded.technical.nutanixCluster.License": {
      "description": "Nutanix cluster license",
      "id": "License",
      "namespace": "services.expanded.technical.nutanixCluster",
      "properties": {
        "distribution": {
          "canBeNull": false,
          "description": "Feature name",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "edition": {
          "canBeNull": false,
          "description": "Feature value",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "features": {
          "canBeNull": true,
          "description": "List of license features",
          "fullType": "services.expanded.technical.nutanixCluster.Features[]",
          "readOnly": true,
          "required": false,
          "type": "services.expanded.technical.nutanixCluster.Features[]"
        }
      }
    },
    "services.expanded.technical.nutanixCluster.Service": {
      "description": "Nutanix cluser services",
      "id": "Service",
      "namespace": "services.expanded.technical.nutanixCluster",
      "properties": {
        "sla": {
          "canBeNull": false,
          "description": "Nutanix SLA service",
          "fullType": "double",
          "readOnly": true,
          "required": false,
          "type": "double"
        }
      }
    },
    "services.expanded.terminationPolicyEnum": {
      "description": "Termination policies",
      "enum": [
        "empty",
        "terminateAtEngagementDate",
        "terminateAtExpirationDate"
      ],
      "enumType": "string",
      "id": "terminationPolicyEnum",
      "namespace": "services.expanded"
    },
    "services.form.Answer": {
      "description": "Answer to a form",
      "id": "Answer",
      "namespace": "services.form",
      "properties": {
        "question": {
          "canBeNull": false,
          "description": "Question of the answer",
          "fullType": "string",
          "readOnly": false,
          "required": false,
          "type": "string"
        },
        "value": {
          "canBeNull": false,
          "description": "Answer value to the question",
          "fullType": "string",
          "readOnly": false,
          "required": false,
          "type": "string"
        }
      }
    },
    "services.form.AnswerAllowedValue": {
      "description": "Possible value for an answer to the question",
      "id": "AnswerAllowedValue",
      "namespace": "services.form",
      "properties": {
        "key": {
          "canBeNull": false,
          "description": "Possible answer to the question",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        }
      }
    },
    "services.form.AnswerTypeEnum": {
      "description": "Type of the answer",
      "enum": [
        "boolean",
        "date",
        "datetime",
        "double",
        "enum",
        "long",
        "string",
        "text"
      ],
      "enumType": "string",
      "id": "AnswerTypeEnum",
      "namespace": "services.form"
    },
    "services.form.Description": {
      "description": "Description of a form",
      "id": "Description",
      "namespace": "services.form",
      "properties": {
        "name": {
          "canBeNull": false,
          "description": "Name of the form",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "questions": {
          "canBeNull": false,
          "description": "List of available questions for the form",
          "fullType": "services.form.Question[]",
          "readOnly": true,
          "required": false,
          "type": "services.form.Question[]"
        }
      }
    },
    "services.form.Form": {
      "description": "Input body for posting a form",
      "id": "Form",
      "namespace": "services.form",
      "properties": {
        "answers": {
          "canBeNull": false,
          "description": "Answers to the form",
          "fullType": "services.form.Answer[]",
          "readOnly": false,
          "required": true,
          "type": "services.form.Answer[]"
        }
      }
    },
    "services.form.Question": {
      "description": "Question description for a churn form",
      "id": "Question",
      "namespace": "services.form",
      "properties": {
        "answers": {
          "canBeNull": true,
          "description": "List of available values for answer",
          "fullType": "services.form.AnswerAllowedValue[]",
          "readOnly": true,
          "required": false,
          "type": "services.form.AnswerAllowedValue[]"
        },
        "mandatory": {
          "canBeNull": false,
          "description": "Is the Question mandatory for the form ?",
          "fullType": "boolean",
          "readOnly": true,
          "required": false,
          "type": "boolean"
        },
        "question": {
          "canBeNull": false,
          "description": "Question name",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        },
        "type": {
          "canBeNull": false,
          "description": "Type of the expected answer : text, enum, number...",
          "fullType": "services.form.AnswerTypeEnum",
          "readOnly": true,
          "required": false,
          "type": "services.form.AnswerTypeEnum"
        }
      }
    },
    "services.form.Response": {
      "description": "Response ack for posting a form",
      "id": "Response",
      "namespace": "services.form",
      "properties": {
        "message": {
          "canBeNull": false,
          "description": "Message after posting a form",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        }
      }
    },
    "services.operation.AddonDetachExecutionRequest": {
      "description": "Contains all information for the given addon in order to be detached",
      "id": "AddonDetachExecutionRequest",
      "namespace": "services.operation",
      "properties": {
        "duration": {
          "canBeNull": false,
          "description": "Duration selected for the operation execution",
          "fullType": "duration",
          "readOnly": false,
          "required": true,
          "type": "duration"
        },
        "planCode": {
          "canBeNull": false,
          "description": "Commercial offer to detach the service to",
          "fullType": "string",
          "readOnly": false,
          "required": true,
          "type": "string"
        },
        "pricingMode": {
          "canBeNull": false,
          "description": "Pricing mode selected for the operation execution",
          "fullType": "string",
          "readOnly": false,
          "required": true,
          "type": "string"
        },
        "quantity": {
          "canBeNull": false,
          "description": "Quantity for the operation execution",
          "fullType": "long",
          "readOnly": false,
          "required": true,
          "type": "long"
        },
        "serviceId": {
          "canBeNull": false,
          "description": "ID of the service that will be detached",
          "fullType": "long",
          "readOnly": false,
          "required": true,
          "type": "long"
        }
      }
    },
    "services.operation.DetachExecutionRequest": {
      "description": "Request allowing the detachment of a service from its parent",
      "id": "DetachExecutionRequest",
      "namespace": "services.operation",
      "properties": {
        "addons": {
          "canBeNull": true,
          "description": "Addons information for the operation execution",
          "fullType": "services.operation.AddonDetachExecutionRequest[]",
          "readOnly": false,
          "required": false,
          "type": "services.operation.AddonDetachExecutionRequest[]"
        },
        "autoPayWithPreferredPaymentMethod": {
          "canBeNull": false,
          "description": "Indicates that order, if needed, will be automatically paid with preferred payment method",
          "fullType": "boolean",
          "readOnly": false,
          "required": false,
          "type": "boolean"
        },
        "duration": {
          "canBeNull": false,
          "description": "Duration selected for the operation execution",
          "fullType": "duration",
          "readOnly": false,
          "required": true,
          "type": "duration"
        },
        "pricingMode": {
          "canBeNull": false,
          "description": "Pricing mode selected for the operation execution",
          "fullType": "string",
          "readOnly": false,
          "required": true,
          "type": "string"
        },
        "quantity": {
          "canBeNull": false,
          "description": "Quantity for the operation execution",
          "fullType": "long",
          "readOnly": false,
          "required": true,
          "type": "long"
        }
      }
    },
    "services.operation.DetachOptionsDefinition": {
      "description": "All possible detachment offers for the given service options",
      "id": "DetachOptionsDefinition",
      "namespace": "services.operation",
      "properties": {
        "plans": {
          "canBeNull": false,
          "description": "Possible options for the given service",
          "fullType": "order.cart.GenericProductDefinition[]",
          "readOnly": true,
          "required": false,
          "type": "order.cart.GenericProductDefinition[]"
        },
        "serviceId": {
          "canBeNull": false,
          "description": "ID of the service",
          "fullType": "long",
          "readOnly": true,
          "required": false,
          "type": "long"
        }
      }
    },
    "services.operation.ExecutionRequest": {
      "description": "Missing description",
      "id": "ExecutionRequest",
      "namespace": "services.operation",
      "properties": {
        "autoPayWithPreferredPaymentMethod": {
          "canBeNull": false,
          "description": "Indicates that order, if needed, will be automatically paid with preferred payment method",
          "fullType": "boolean",
          "readOnly": false,
          "required": false,
          "type": "boolean"
        },
        "duration": {
          "canBeNull": false,
          "description": "Duration selected for the operation execution",
          "fullType": "duration",
          "readOnly": false,
          "required": true,
          "type": "duration"
        },
        "pricingMode": {
          "canBeNull": false,
          "description": "Pricing mode selected for the operation execution",
          "fullType": "string",
          "readOnly": false,
          "required": true,
          "type": "string"
        },
        "quantity": {
          "canBeNull": false,
          "description": "Quantity for the operation execution",
          "fullType": "long",
          "readOnly": false,
          "required": true,
          "type": "long"
        }
      }
    },
    "services.operation.Order": {
      "description": "Order created by an Operation to modify a Service",
      "id": "Order",
      "namespace": "services.operation",
      "properties": {
        "order": {
          "canBeNull": true,
          "description": "Order created, if any",
          "fullType": "order.Order",
          "readOnly": true,
          "required": false,
          "type": "order.Order"
        }
      }
    },
    "services.terminate.ConfirmServiceTerminationRequest": {
      "description": "Confirm service termination request",
      "id": "ConfirmServiceTerminationRequest",
      "namespace": "services.terminate",
      "properties": {
        "token": {
          "canBeNull": false,
          "description": "The termination token sent by mail to the admin contact",
          "fullType": "password",
          "readOnly": false,
          "required": true,
          "type": "password"
        }
      }
    },
    "services.terminate.TerminationAnswer": {
      "description": "Termination instructions",
      "id": "TerminationAnswer",
      "namespace": "services.terminate",
      "properties": {
        "message": {
          "canBeNull": false,
          "description": "Termination instructions to be followed",
          "fullType": "string",
          "readOnly": true,
          "required": false,
          "type": "string"
        }
      }
    },
    "services.update.Service": {
      "description": "Update of a service",
      "id": "Service",
      "namespace": "services.update",
      "properties": {
        "displayName": {
          "canBeNull": true,
          "description": "Display name for the service",
          "fullType": "string",
          "readOnly": false,
          "required": false,
          "type": "string"
        },
        "renew": {
          "canBeNull": true,
          "description": "Renew information",
          "fullType": "services.update.Service.Renew",
          "readOnly": false,
          "required": false,
          "type": "services.update.Service.Renew"
        },
        "terminationPolicy": {
          "canBeNull": true,
          "description": "Termination policy",
          "fullType": "services.expanded.terminationPolicyEnum",
          "readOnly": false,
          "required": false,
          "type": "services.expanded.terminationPolicyEnum"
        }
      }
    },
    "services.update.Service.Renew": {
      "description": "Update renew information of a service",
      "id": "Renew",
      "namespace": "services.update.Service",
      "properties": {
        "mode": {
          "canBeNull": false,
          "description": "Renew mode for next renewal",
          "fullType": "services.expanded.Renew.ModeEnum",
          "readOnly": false,
          "required": false,
          "type": "services.expanded.Renew.ModeEnum"
        },
        "period": {
          "canBeNull": false,
          "description": "Renew period for next renewal",
          "fullType": "duration",
          "readOnly": false,
          "required": false,
          "type": "duration"
        }
      }
    }
  },
  "resourcePath": "/services"
}